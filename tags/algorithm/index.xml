<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>algorithm on 🍉 神奇的战士</title><link>https://wangshub.github.io/tags/algorithm/</link><description>Recent content in algorithm on 🍉 神奇的战士</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 05 Nov 2019 10:03:35 +0000</lastBuildDate><atom:link href="https://wangshub.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>双足机器人如何行走？</title><link>https://wangshub.github.io/posts/%E5%8F%8C%E8%B6%B3%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%A6%82%E4%BD%95%E8%A1%8C%E8%B5%B0/</link><pubDate>Tue, 05 Nov 2019 10:03:35 +0000</pubDate><guid>https://wangshub.github.io/posts/%E5%8F%8C%E8%B6%B3%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%A6%82%E4%BD%95%E8%A1%8C%E8%B5%B0/</guid><description>[双足机器人如何行走？] 译文：how-do-biped-robots-walk 早在上个世纪七八十年代，双足行走就已经在机器人上实现了，但双足</description></item><item><title>强化学习策略网络复杂度的影响</title><link>https://wangshub.github.io/posts/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AD%96%E7%95%A5%E7%BD%91%E7%BB%9C%E7%9A%84%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%BD%B1%E5%93%8D/</link><pubDate>Mon, 04 Nov 2019 17:20:29 +0000</pubDate><guid>https://wangshub.github.io/posts/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AD%96%E7%95%A5%E7%BD%91%E7%BB%9C%E7%9A%84%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%BD%B1%E5%93%8D/</guid><description>强化学习策略网络调参 传统的基于状态-动作强化学习方法会遇到维度诅咒的问题，为了解决这个问题，基于策略的强化学习方法被提出，比如经典的策略梯度</description></item><item><title>Vanilla_Policy_Gradient</title><link>https://wangshub.github.io/posts/vanilla-policy-gradient/</link><pubDate>Tue, 29 Jan 2019 16:48:53 +0000</pubDate><guid>https://wangshub.github.io/posts/vanilla-policy-gradient/</guid><description>强化学习 Vanilla Policy Gradient 令 $\pi _ { \theta }$ 表示参数为 $\theta$ 的策略，$J \left( \pi _ { \theta } \right)$ 表示策略 $\pi _ { \theta }$ 的返回值，则优化函数梯度为 $$\nabla _ { \theta } J \left( \pi _ { \theta } \right) = \underset {</description></item><item><title>强化学习策略梯度算法</title><link>https://wangshub.github.io/posts/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AD%96%E7%95%A5%E6%A2%AF%E5%BA%A6%E7%AE%97%E6%B3%95/</link><pubDate>Tue, 15 Jan 2019 19:46:17 +0000</pubDate><guid>https://wangshub.github.io/posts/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AD%96%E7%95%A5%E6%A2%AF%E5%BA%A6%E7%AE%97%E6%B3%95/</guid><description>强化学习:策略梯度算法 策略梯度的公式推导 ​ 学习参数化表示的策略 (Parameterized policy), 输入环境状态 $ S $ 来选择动作 $a$ ，这里使用 $\theta \in \mathbb { R } ^ { d }$ 来表示策略的参</description></item><item><title>python数字图像处理-图像噪声与去噪算法</title><link>https://wangshub.github.io/posts/python%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E5%9B%BE%E5%83%8F%E5%99%AA%E5%A3%B0%E4%B8%8E%E5%8E%BB%E5%99%AA%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 16 Dec 2017 17:19:29 +0000</pubDate><guid>https://wangshub.github.io/posts/python%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E5%9B%BE%E5%83%8F%E5%99%AA%E5%A3%B0%E4%B8%8E%E5%8E%BB%E5%99%AA%E7%AE%97%E6%B3%95/</guid><description>python数字图像处理-图像噪声与去噪算法 图像噪声 椒盐噪声 概述： 椒盐噪声（salt &amp;amp; pepper noise）是数字图像的一个常见噪声，所谓椒盐，椒就</description></item><item><title>python数字图像处理-图像的基本结构和基础知识</title><link>https://wangshub.github.io/posts/python%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E5%9B%BE%E5%83%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link><pubDate>Sat, 16 Dec 2017 17:10:39 +0000</pubDate><guid>https://wangshub.github.io/posts/python%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E5%9B%BE%E5%83%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid><description>数字图像处理-图像的基本结构和基础知识 一、python实现BMP图像的读取和显示 BMP文件格式，又称为Bitmap（位图）或是DIB(Dev</description></item><item><title>python 数据结构之二叉搜索树</title><link>https://wangshub.github.io/posts/python-data-structure-bst/</link><pubDate>Mon, 29 May 2017 23:06:12 +0000</pubDate><guid>https://wangshub.github.io/posts/python-data-structure-bst/</guid><description>二叉搜索树定义 一颗二叉搜索树是以二叉树来组织的,每个节点除了 Key 还包括 左孩子, 右孩子, 父节点 等信息. BST满足限制条件: 对于任意节点的X,他的</description></item></channel></rss>